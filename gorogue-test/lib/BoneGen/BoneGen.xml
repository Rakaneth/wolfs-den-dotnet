<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BoneGen</name>
    </assembly>
    <members>
        <member name="T:BoneGen.TilesetType">
            <summary>
            Passed to BoneGen.Generate() to select a style of dungeon.
            </summary>
        </member>
        <member name="T:BoneGen.Config">
            <summary>
            Part of the JSON that defines a tileset.
            </summary>
        </member>
        <member name="T:BoneGen.Maximums">
            <summary>
            Part of the JSON that defines a tileset.
            </summary>
        </member>
        <member name="T:BoneGen.Tile">
            <summary>
            Part of the JSON that defines a tileset.
            </summary>
        </member>
        <member name="T:BoneGen.Tileset">
            <summary>
            The outermost class in the JSON that defines a tileset.
            </summary>
        </member>
        <member name="T:BoneGen.BoneGen">
            <summary>
            Contains methods for generating dungeons and caves
            with Sean T. Barrett's Herringbone Wang Tile dungeon
            generation algorithm.
            </summary>
        </member>
        <member name="F:BoneGen.BoneGen.R">
            <summary>
            Can be set in the constructor or later; probably only relevant if you use a seeded RNG.
            </summary>
        </member>
        <member name="M:BoneGen.BoneGen.Generate(BoneGen.TilesetType,System.Int32,System.Int32)">
            <summary>
            The main way of generating dungeons with BoneGen. Consider using BoneGen.WallWrap
            (a static method) to surround the edges with walls.
            </summary>
            <param name="tt">A TilesetType enum; try lots of these out to see how they look.</param>
            <param name="h">Height of the dungeon to generate in chars.</param>
            <param name="w">Width of the dungeon to generate in chars.</param>
            <returns>A row-major char[,] with h rows and w columns; it will be filled with '#' for walls and '.' for floors.</returns>
        </member>
        <member name="M:BoneGen.BoneGen.WallWrap(System.Char[0:,0:])">
            <summary>
            Changes the outer edge of a char[,] to the wall char, '#'.
            </summary>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:BoneGen.BoneGen.Generate(BoneGen.Tileset,System.Int32,System.Int32)">
            <summary>
            If you have your own Tileset gained by parsing your own JSON, use
            this to generate a dungeon using it. Consider using BoneGen.WallWrap
            (a static method) to surround the edges with walls.
            </summary>
            <param name="ts">A Tileset; if you don't have one of these available, use a TilesetType enum instead to select a predefined one.</param>
            <param name="h">Height of the dungeon to generate in chars.</param>
            <param name="w">Width of the dungeon to generate in chars.</param>
            <returns>A row-major char[,] with h rows and w columns; it will be filled with '#' for walls and '.' for floors.</returns>
        </member>
        <member name="M:BoneGen.BoneGen.#ctor">
            <summary>
            Constructs a BoneGen that uses the default RNG.
            </summary>
        </member>
        <member name="M:BoneGen.BoneGen.#ctor(System.Random)">
            <summary>
            Constructs a BoneGen with the given RNG.
            </summary>
            <param name="r"></param>
        </member>
        <member name="T:BoneGen.Extensions">
            <summary>
            Extension methods used by BoneGen, usable by others as well!
            </summary>
        </member>
        <member name="M:BoneGen.Extensions.Insert``1(``0[0:,0:],``0[0:,0:],System.Int32,System.Int32)">
            <summary>
            Insert and replace a section of a larger 2D array with a smaller one.
            If coords are only partially in-bounds, only the section that is within the
            boundaries of the larger 'mat' will be replaced.
            </summary>
            <typeparam name="T">Any type.</typeparam>
            <param name="mat">A 2d array, will be modified.</param>
            <param name="items">A (possibly) smaller 2D array to be inserted.</param>
            <param name="coord1">The coordinate to be given first as an index to mat and items.</param>
            <param name="coord2">The coordnate to be given second as an index to mat and items.</param>
            <returns></returns>
        </member>
        <member name="M:BoneGen.Extensions.Insert``1(``0[0:,0:],``0[][],System.Int32,System.Int32)">
            <summary>
            Insert and replace a section of a larger 2D array with a smaller one, here a jagged smaller array.
            If coords are only partially in-bounds, only the section that is within the
            boundaries of the larger 'mat' will be replaced.
            </summary>
            <typeparam name="T">Any type.</typeparam>
            <param name="mat">A 2d array, will be modified.</param>
            <param name="items">A (possibly) smaller jagged array to be inserted.</param>
            <param name="coord1">The coordinate to be given first as an index to mat and items.</param>
            <param name="coord2">The coordnate to be given second as an index to mat and items.</param>
            <returns></returns>
        </member>
        <member name="M:BoneGen.Extensions.Insert(System.Char[0:,0:],System.String[],System.Int32,System.Int32)">
            <summary>
            Insert and replace a section of a larger 2D char array with a smaller one here a 1D
            array of strings that is used as a 2D grid of chars.
            If coords are only partially in-bounds, only the section that is within the
            boundaries of the larger 'mat' will be replaced.
            </summary>
            <param name="mat">A 2d array, will be modified.</param>
            <param name="items">A (possibly) smaller (and possibly jagged) array of strings to be inserted.</param>
            <param name="coord1">The coordinate to be given first as an index to mat and items.</param>
            <param name="coord2">The coordnate to be given second as an index to mat and items.</param>
            <returns></returns>
        </member>
    </members>
</doc>
